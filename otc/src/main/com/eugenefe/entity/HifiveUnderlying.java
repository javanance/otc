package com.eugenefe.entity;

// Generated Nov 25, 2013 6:47:59 PM by Hibernate Tools 4.0.0

import static com.eugenefe.util.MarketVariableType.STOCK;

import java.math.BigDecimal;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.hibernate.annotations.Type;

import com.eugenefe.enums.EBarrierHit;
import com.eugenefe.util.AnnoMethodTree;
import com.eugenefe.util.AnnoNavigationFilter;
import com.eugenefe.util.EColumnType;
import com.eugenefe.util.MarketVariableType;

/**
 * HifiveUnderlying generated by hbm2java
 */
@Entity
@Table(name = "HIFIVE_UNDERLYING")
@AnnoNavigationFilter
public class HifiveUnderlying implements java.io.Serializable, Cloneable {

	private HifiveUnderlyingId id;
	private Hifive hifive;
//	private Stock stock;
	
	private MarketVariableNew underlying;
	
	private MarketVariableJoin underJoin;
	
	@ManyToOne(fetch = FetchType.LAZY )
	@JoinColumn(name = "STOCK_ID", nullable = false, insertable = false, updatable = false)
	@AnnoMethodTree(order=20, init=true, type=EColumnType.Entity)	
	public MarketVariableJoin getUnderJoin() {
		return underJoin;
	}
	public void setUnderJoin(MarketVariableJoin underJoin) {
		this.underJoin = underJoin;
	}

	private BigDecimal basePrice;
	private BigDecimal dividend;
//	private boolean upHitted;
	private EBarrierHit upHitted;
	private String underlyingType;
	private MarketVariableType underType;
	private String underlyingId;
	private String prodId;

	public HifiveUnderlying() {

	}

//	public HifiveUnderlying(HifiveUnderlyingId id, Hifive hifive, Stock stock) {
//		this.id = id;
//		this.hifive = hifive;
//		this.stock = stock;
//	}

//	public HifiveUnderlying(HifiveUnderlyingId id, Hifive hifive, Stock stock, BigDecimal basePrice,
//			BigDecimal dividend, Character isUphitted) {
//		this.id = id;
//		this.hifive = hifive;
////		this.stock = stock;
//		this.underlying =stock;
//		this.basePrice = basePrice;
//		this.dividend = dividend;
//		this.isUphitted = isUphitted;
//
//	}

	@EmbeddedId
	@AttributeOverrides({
			@AttributeOverride(name = "prodId", column = @Column(name = "PROD_ID", nullable = false, length = 20)),
			@AttributeOverride(name = "underlyingId", column = @Column(name = "STOCK_ID", nullable = false, length = 20)) })
	@AnnoMethodTree(order=10, init=true)
	public HifiveUnderlyingId getId() {
		return this.id;
	}

	public void setId(HifiveUnderlyingId id) {
		this.id = id;
	}

	

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "PROD_ID", nullable = false, insertable = false, updatable = false)
	@AnnoMethodTree(order=11, init=true,type=EColumnType.Entity)
	public Hifive getHifive() {
		return this.hifive;
	}

	public void setHifive(Hifive hifive) {
		this.hifive = hifive;
	}
	
//	@ManyToOne(fetch = FetchType.LAZY)
//	@JoinColumn(name = "STOCK_ID", nullable = false, insertable = false, updatable = false)
//	@AnnoMethodTree(order=20, init=true, type=EColumnType.Entity)
//	public Stock getStock() {
//		return this.stock;
//	}
//
//	public void setStock(Stock stock) {
//		this.stock = stock;
//	}
	
	@ManyToOne(fetch = FetchType.LAZY )
	@JoinColumn(name = "STOCK_ID", nullable = false, insertable = false, updatable = false)
	@AnnoMethodTree(order=20, init=true, type=EColumnType.Entity)
	public MarketVariableNew getUnderlying() {
		return underlying;
	}

	public void setUnderlying(MarketVariableNew underlying) {
		this.underlying = underlying;
	}

	@Column(name = "BASE_PRICE", precision = 10, scale = 4)
	@AnnoMethodTree(order=30, init=true, align="right", type=EColumnType.Number)
	public BigDecimal getBasePrice() {
		return this.basePrice;
	}

	public void setBasePrice(BigDecimal basePrice) {
		this.basePrice = basePrice;
	}

	@Column(name = "DIVIDEND", precision = 10, scale = 4)
	@AnnoMethodTree(order=40, init=true, align ="right", type=EColumnType.Number)
	public BigDecimal getDividend() {
		return this.dividend;
	}

	public void setDividend(BigDecimal dividend) {
		this.dividend = dividend;
	}

//	@Column(name = "IS_UPHITTED", length = 1)
//	@Type(type="yes_no")
//	@AnnoMethodTree(order=50, init=true)
//	public boolean isUpHitted() {
//		return upHitted;
//	}
//	public void setUpHitted(boolean upHitted) {
//		this.upHitted = upHitted;
//	}
	
	@Column(name = "IS_UPHITTED", length=1)
	@Enumerated(EnumType.STRING)
	@AnnoMethodTree(order=50, init=true)
	public EBarrierHit getUpHitted() {
		return upHitted;
	}

	public void setUpHitted(EBarrierHit upHitted) {
		this.upHitted = upHitted;
	}

	
	@Transient
	public String getProdId() {
		if(prodId==null || prodId==""){
				prodId= id.getProdId();
		}
		return prodId;
	}

	public void setProdId(String prodId) {
		this.prodId = prodId;
	}

	@Transient
	public String getUnderlyingId() {
		if(underlyingId==null || underlyingId==""){
			if(underlying!=null){
				underlyingId= id.getUnderlyingId();
			}
		}
		return underlyingId;
	}

	public void setUnderlyingId(String underlyingId) {
		this.underlyingId = underlyingId;
	}
	
	@Transient
	public String getUnderlyingType() {
		return underlyingType;
	}
	public void setUnderlyingType(String underlyingType) {
		this.underlyingType = underlyingType;
	}
	@Transient
	public MarketVariableType getUnderType() {
		return underType;
	}
	public void setUnderType(MarketVariableType underType) {
		this.underType = underType;
	}

	
	@Transient
	@Override
	public Object clone(){
		try{
			return super.clone();
		}catch(Exception e){
			
		}
		return null;
	}
}
