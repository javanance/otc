package com.eugenefe.entity;

// Generated 2014. 1. 28 ¿ÀÀü 9:38:27 by Hibernate Tools 4.0.0

import java.math.BigDecimal;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.drools.lang.DRLExpressions.instanceof_key_return;

import com.eugenefe.entity.component.PriceData;
import com.eugenefe.enums.EShockType;
import com.eugenefe.util.AnnoMethodTree;
import com.eugenefe.util.AnnoNavigationFilter;

/**
 * ScenarioDetail generated by hbm2java
 */
@Entity
@Table(name = "SCENARIO_DETAIL")
@AnnoNavigationFilter
public class ScenarioDetail implements java.io.Serializable {

	private ScenarioDetailId id;
//	private String shockType;
	private EShockType shockType;
	private BigDecimal shockValue;
	
	private Scenario scenario;
	private MarketVariableJoin marketVariable;
	
	public ScenarioDetail() {
	}

	public ScenarioDetail(ScenarioDetailId id) {
		this.id = id;
	}

//	public ScenarioDetail(ScenarioDetailId id, String shockType, BigDecimal shockValue) {
//		this.id = id;
//		this.shockType = shockType;
//		this.shockValue = shockValue;
//	}

	@EmbeddedId
	@AttributeOverrides({
			@AttributeOverride(name = "scenarioId", column = @Column(name = "SCENARIO_ID", nullable = false, length = 20)),
			@AttributeOverride(name = "mvId", column = @Column(name = "MV_ID", nullable = false, length = 20)) })
	@AnnoMethodTree(order=10, init=true)
	public ScenarioDetailId getId() {
		return this.id;
	}

	public void setId(ScenarioDetailId id) {
		this.id = id;
	}
	
	
//	@Transient
	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name = "SCENARIO_ID", nullable = true, updatable=false, insertable=false)
	@AnnoMethodTree(order=12, init=true)
	public Scenario getScenario() {
		return scenario;
	}

	public void setScenario(Scenario scenario) {
		this.scenario = scenario;
	}

	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name = "MV_ID", nullable = true, updatable=false, insertable=false)
	@AnnoMethodTree(order=15, init=true)
	public MarketVariableJoin getMarketVariable() {
		return marketVariable;
	}

	public void setMarketVariable(MarketVariableJoin marketVariable) {
		this.marketVariable = marketVariable;
	}
	
//	@Column(name = "SHOCK_TYPE", length = 10)
//	@AnnoMethodTree(order=20, init=true)
//	public String getShockType() {
//		return this.shockType;
//	}
//	public void setShockType(String shockType) {
//		this.shockType = shockType;
//	}
	
	@Column(name = "SHOCK_TYPE", length = 10)
	@Enumerated(EnumType.STRING)
	@AnnoMethodTree(order=20, init=true)
	public EShockType getShockType() {
		return shockType;
	}

	public void setShockType(EShockType shockType) {
		this.shockType = shockType;
	}
	

	@Column(name = "SHOCK_VALUE", scale = 4)
	@AnnoMethodTree(order=30, init=true)
	public BigDecimal getShockValue() {
		return this.shockValue;
	}


	public void setShockValue(BigDecimal shockValue) {
		this.shockValue = shockValue;
	}
	
	@Transient
	public Double getScenarioValue(String bssd){
//		return shockValue.doubleValue() * marketVariable.getPriceData(bssd).getClosePrice();
		PriceData temp = marketVariable.getPriceData(bssd);
		if(temp==null){
			return null;
		}else{
			return shockType.getScenarioValue(temp.getClosePrice(), shockValue.doubleValue());
		}
	}
	
	@Transient
	public Double getCurrentValue(String bssd){
		if(marketVariable.getPriceData(bssd)==null){
			return null;
		}
		return marketVariable.getPriceData(bssd).getClosePrice();
	}
	
	@Transient
	public PriceData getScenarioPriceData(String bssd){
		return shockType.getScenarioPriceData(marketVariable.getPriceData(bssd), shockValue.doubleValue());
	}

	@Transient
	@Override
	public boolean equals(Object obj) {
		if(obj instanceof ScenarioDetail){
			return this.id.equals(((ScenarioDetail)obj).getId());
		}else {
			return false;
		}
			
	}
	
	
}
