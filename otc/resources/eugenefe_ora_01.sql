
/* Drop Tables */

DROP TABLE TAKION79.BOND_HIS;
DROP TABLE TAKION79.BOND_INDEX_HIS;
DROP TABLE TAKION79.ETF_HIS;
DROP TABLE TAKION79.ETF_PDF;
DROP TABLE TAKION79.FUTURES_HIS;
DROP TABLE TAKION79.FX_RATE_HIS;
DROP TABLE TAKION79.INT_RATE_HIS;
DROP TABLE TAKION79.IR_CURVE_HIS;
DROP TABLE TAKION79.MACRO_INDEX_HIS;
DROP TABLE TAKION79.OPTION_HIS;
DROP TABLE TAKION79.PORTFOLIO_CASHFLOW;
DROP TABLE TAKION79.PORTFOLIO_DETAIL;
DROP TABLE TAKION79.PORTFOLIO_RETURN;
DROP TABLE TAKION79.PORTFOLIO_RISK;
DROP TABLE TAKION79.PORTFOLIO_RISK_DETAIL;
DROP TABLE TAKION79.PORTFOLIO_SENSITIVITY;
DROP TABLE TAKION79.POSITION_CASHFLOW;
DROP TABLE TAKION79.POSITION_GREEKS;
DROP TABLE TAKION79.POSITION_IR_SENSITITIVY;
DROP TABLE TAKION79.POSITION_RETURN;
DROP TABLE TAKION79.POSITION_RISK_DETAIL;
DROP TABLE TAKION79.POSITION_RISK;
DROP TABLE TAKION79.PRODUCT_CASHFLOW;
DROP TABLE TAKION79.SCENARIO_HIS;
DROP TABLE TAKION79.STOCK_HIS;
DROP TABLE TAKION79.STOCK_INDEX_HIS;
DROP TABLE TAKION79.SYNTHETICS_HIS;
DROP TABLE TAKION79.VCV_MATRIX_HIS;
DROP TABLE TAKION79.BASEDATE;
DROP TABLE TAKION79.POSITION;
DROP TABLE TAKION79.EMPLOYEE;
DROP TABLE TAKION79.BIZUNIT;
DROP TABLE TAKION79.BOND_INDEX_DETAIL;
DROP TABLE TAKION79.BOND;
DROP TABLE TAKION79.BOND_INDEX;
DROP TABLE TAKION79.HIFIVE_STRIKE;
DROP TABLE TAKION79.HIFIVE_SWAP_IR;
DROP TABLE TAKION79.HIFIVE_UNDERLYING;
DROP TABLE TAKION79.PRICING_UNDERLYING;
DROP TABLE TAKION79.PRICING;
DROP TABLE TAKION79.HIFIVE;
DROP TABLE TAKION79.COUNTERPARTY;
DROP TABLE TAKION79.ETF;
DROP TABLE TAKION79.FN_ACCOUNT;
DROP TABLE TAKION79.FUTURES;
DROP TABLE TAKION79.FX_CASH;
DROP TABLE TAKION79.IRC_BUCKET_DETAIL;
DROP TABLE TAKION79.INT_RATE;
DROP TABLE TAKION79.IRC_FUNCTION_DETAIL;
DROP TABLE TAKION79.IR_CURVE;
DROP TABLE TAKION79.MACRO_INDEX;
DROP TABLE TAKION79.OPTIONS;
DROP TABLE TAKION79.RISK_FACTOR;
DROP TABLE TAKION79.SCENARIO_DETAIL;
DROP TABLE TAKION79.STOCK_INDEX_DETAIL;
DROP TABLE TAKION79.STOCK;
DROP TABLE TAKION79.STOCK_INDEX;
DROP TABLE TAKION79.SYNTHETIC_DETAIL;
DROP TABLE TAKION79.SYNTHETICS;
DROP TABLE TAKION79.MARKET_VARIABLE;
DROP TABLE TAKION79.MATURITY;
DROP TABLE TAKION79.PORTFOLIO_CHILD;
DROP TABLE TAKION79.PORTFOLIO;
DROP TABLE TAKION79.PRICER;
DROP TABLE TAKION79.PRICING_METHOD;
DROP TABLE TAKION79.SCENARIO;
DROP TABLE TAKION79.SCENARIO_SET;
DROP TABLE TAKION79.SCENARIO_VAR;
DROP TABLE TAKION79.STOCK_EXCHANGE;
DROP TABLE TAKION79.VAR_GEN_MCD;
DROP TABLE TAKION79.VCV_MATRIX;
DROP TABLE TAKION79.VOL_CURVE;




/* Create Tables */

CREATE TABLE TAKION79.BASEDATE
(
	BSSD VARCHAR2(8) NOT NULL,
	IS_BIZDAY CHAR(1),
	PREV_BIZDAY VARCHAR2(8),
	NEXT_BIZDAY VARCHAR2(8),
	EOM_BIZDAY VARCHAR2(8),
	EOQ_BIZDAY VARCHAR2(8),
	-- END OF SEMI ANNUAL
	EOS_BIZDAY VARCHAR2(8),
	EOY_BIZDAY VARCHAR2(8),
	FISCAL_BIZDAY VARCHAR2(8),
	PRIMARY KEY (BSSD)
);


CREATE TABLE TAKION79.BIZUNIT
(
	ORG_ID VARCHAR2(20) NOT NULL,
	ORG_NAME VARCHAR2(50),
	PARENT_ORG_ID VARCHAR2(20),
	PRIMARY KEY (ORG_ID)
);


CREATE TABLE TAKION79.BOND
(
	MV_ID VARCHAR2(20) NOT NULL,
	ISSUER_ID VARCHAR2(30),
	FACE_AMT NUMBER(10,0),
	TOTAL_AMT NUMBER(19,0),
	ISSUE_DATE VARCHAR2(8),
	MATURITY_DATE VARCHAR2(8),
	COUPON_RATE NUMBER(10,8),
	INT_TERM VARCHAR2(10),
	COMPOUND_MTD VARCHAR2(10),
	DAYCOUNT_MTD VARCHAR2(10),
	-- DISCOUNT, BULLET, FIXED, FLOATING, FIXED AMORT, FLOAT_AMORT, ...
	BOND_CF_TYPE VARCHAR2(10),
	-- FISRT, SECONDARY
	PRIORITY_CD VARCHAR2(10),
	-- ABS, MBS, CDO,....
	SECURITIZATION_CD VARCHAR2(10),
	CREDIT_RATING_CD VARCHAR2(10),
	CURR_CD VARCHAR2(3),
	PREMIUM_AT_END NUMBER(10,4),
	-- GOV,ILB, BANK, CORP, ABS,...
	BOND_TYPE VARCHAR2(10),
	INIT_INB_INDEX NUMBER(10,4),
	-- ANNUITY, EQUAL, BULLET
	REDEM_MCD VARCHAR2(10),
	AMORT_ST_DATE VARCHAR2(8),
	DEFER_TERM VARCHAR2(10),
	AMORT_CNT NUMBER(10,0),
	AMORT_FREQ NUMBER(10,0),
	AMORT_AMT NUMBER(19,4),
	IS_CP_PREPAY CHAR(1),
	REF_IRC_ID VARCHAR2(20),
	SPREAD_RATE NUMBER(10,4),
	REFIXING_TERM VARCHAR2(10),
	FIRST_COUPON_DATE VARCHAR2(8),
	-- FORWARD, BACKWARD,...
	CP_DATE_GEN VARCHAR2(10),
	REFIXING_SLIDE_NUM NUMBER(10,0),
	CAP_RATE NUMBER(10,4),
	FLOOR_RATE NUMBER(10,4),
	-- CONVERTIBLE, EXCHANGABLE,...
	STOCK_LINKED_TYPE VARCHAR2(10),
	REF_STOCK_ID VARCHAR2(20),
	OPTION_ST_DATE VARCHAR2(8),
	OPTION_ED_DATE VARCHAR2(8),
	STRIKE_PRICE NUMBER(10,4),
	CONVERSION_RATIO NUMBER(10,4),
	PRIMARY KEY (MV_ID)
);


CREATE TABLE TAKION79.BOND_HIS
(
	BSSD VARCHAR2(8) NOT NULL,
	BOND_ID VARCHAR2(20) NOT NULL,
	BASE_PRICE NUMBER(19,4),
	OPEN_PRICE NUMBER(19,4),
	HIGH_PRICE NUMBER(19,4),
	LOW_PRICE NUMBER(19,4),
	CLOSE_PRICE NUMBER(19,4),
	VOLUME NUMBER(19,0),
	VOLUME_AMT NUMBER(19,0),
	ADJ_DURATION NUMBER(19,4),
	MD_DURATION NUMBER(19,4),
	EFFECT_DURATION NUMBER(19,4),
	ADJ_CONVEXITY NUMBER(19,4),
	EFFECT_CONVEXITY NUMBER(19,4),
	PRIMARY KEY (BSSD, BOND_ID)
);


CREATE TABLE TAKION79.BOND_INDEX
(
	BOND_INDEX_ID VARCHAR2(20) NOT NULL,
	BOND_INDEX_NAME VARCHAR2(50),
	SOURCE_TABLE VARCHAR2(50),
	USER_NAME VARCHAR2(20),
	LAST_UPDATED VARCHAR2(8),
	VERSION_NO NUMBER,
	PRIMARY KEY (BOND_INDEX_ID)
);


CREATE TABLE TAKION79.BOND_INDEX_DETAIL
(
	BOND_INDEX_ID VARCHAR2(20) NOT NULL,
	BOND_ID VARCHAR2(20) NOT NULL
);


CREATE TABLE TAKION79.BOND_INDEX_HIS
(
	BSSD VARCHAR2(8) NOT NULL,
	BOND_INDEX_ID VARCHAR2(20) NOT NULL,
	BASE_PRICE NUMBER(19,4),
	OPEN_PRICE NUMBER(19,4),
	HIGH_PRICE NUMBER(19,4),
	LOW_PRICE NUMBER(19,4),
	CLOSE_PRICE NUMBER(19,4),
	VOLUME NUMBER(19,0),
	VOLUME_AMT NUMBER(19,0),
	PRIMARY KEY (BSSD, BOND_INDEX_ID)
);


CREATE TABLE TAKION79.COUNTERPARTY
(
	COUNTERPARTY_ID VARCHAR2(20) NOT NULL,
	COUNTERPARTY_NAME VARCHAR2(50),
	-- GOV, BANK, SECURITIES, ASSET, INSURER, BROKER, ...
	COUNTERPARTY_TYPE VARCHAR2(10),
	CORP_NO VARCHAR2(13),
	CREDIT_RATING_CD VARCHAR2(10),
	PRIMARY KEY (COUNTERPARTY_ID)
);


CREATE TABLE TAKION79.EMPLOYEE
(
	MEMBER_ID VARCHAR2(20) NOT NULL,
	MEMBER_NAME VARCHAR2(50),
	-- ADMIN, MANAGER, DEALER, STAFF,...
	MEMBER_TYPE VARCHAR2(10),
	ORG_ID VARCHAR2(20),
	PRIMARY KEY (MEMBER_ID)
);


CREATE TABLE TAKION79.ETF
(
	ETF_ID VARCHAR2(20) NOT NULL,
	ETF_NAME VARCHAR2(50),
	ISIN_CD VARCHAR2(20),
	BM_ID VARCHAR2(20),
	BM_COEFFICIENT NUMBER(10,4),
	NUM_PER_CU NUMBER(10,0),
	NUM_SHARES NUMBER(10,0),
	TOT_AMT NUMBER(19,0),
	SOURCE_TABLE VARCHAR2(50),
	USER_NAME VARCHAR2(20),
	LAST_UPDATED VARCHAR2(8),
	VERSION_NO NUMBER,
	PRIMARY KEY (ETF_ID)
);


CREATE TABLE TAKION79.ETF_HIS
(
	BSSD VARCHAR2(8) NOT NULL,
	ETF_ID VARCHAR2(20) NOT NULL,
	BASE_PRICE NUMBER(19,4),
	OPEN_PRICE NUMBER(19,4),
	HIGH_PRICE NUMBER(19,4),
	LOW_PRICE NUMBER(19,4),
	CLOSE_PRICE NUMBER(19,4),
	VOLUME NUMBER(19,0),
	VOLUME_AMT NUMBER(19,0),
	NAV NUMBER(19,4),
	PRIMARY KEY (BSSD, ETF_ID)
);


-- NUMBER OF HOLDING STOCK FOR 1 CU OF ETF
CREATE TABLE TAKION79.ETF_PDF
(
	BSSD VARCHAR2(8) NOT NULL,
	ETF_ID VARCHAR2(20) NOT NULL,
	PROD_ID VARCHAR2(20) NOT NULL,
	HOLDING_QTY NUMBER(10,0),
	EVAL_AMT NUMBER(19,4),
	SOURCE_TABLE VARCHAR2(50),
	USER_NAME VARCHAR2(20),
	LAST_UPDATED VARCHAR2(8),
	VERSION_NO NUMBER,
	PRIMARY KEY (BSSD, ETF_ID, PROD_ID)
);


CREATE TABLE TAKION79.FN_ACCOUNT
(
	ACCOUNT_ID VARCHAR2(20) NOT NULL,
	ACCOUNT_NAME VARCHAR2(50),
	DEALER_ID VARCHAR2(20),
	TOTAL_LIMIT NUMBER(19,0),
	PRIMARY KEY (ACCOUNT_ID)
);


CREATE TABLE TAKION79.FUTURES
(
	FUTURES_ID VARCHAR2(20) NOT NULL,
	ISSUE_DATE VARCHAR2(8),
	MATURITY_DATE VARCHAR2(8),
	UNDERLYING_ID VARCHAR2(20),
	NOTIONAL_AMT NUMBER(19,0),
	STRIKE_PRICE NUMBER(10,4),
	SOURCE_TABLE VARCHAR2(50),
	USER_NAME VARCHAR2(20),
	LAST_UPDATED VARCHAR2(8),
	VERSION_NO NUMBER,
	PRIMARY KEY (FUTURES_ID)
);


CREATE TABLE TAKION79.FUTURES_HIS
(
	BSSD VARCHAR2(8) NOT NULL,
	FUTURES_ID VARCHAR2(20) NOT NULL,
	BASE_PRICE NUMBER(19,4),
	OPEN_PRICE NUMBER(19,4),
	HIGH_PRICE NUMBER(19,4),
	LOW_PRICE NUMBER(19,4),
	CLOSE_PRICE NUMBER(19,4),
	VOLUME NUMBER(19,0),
	VOLUME_AMT NUMBER(19,0),
	DELTA NUMBER(19,4),
	GAMMA NUMBER(19,4),
	VEGA NUMBER(19,4),
	THETA NUMBER(19,4),
	RHO NUMBER(19,4),
	PRIMARY KEY (BSSD, FUTURES_ID)
);


CREATE TABLE TAKION79.FX_CASH
(
	FX_ID VARCHAR2(20) NOT NULL,
	FX_NAME VARCHAR2(50),
	TERM_CURR VARCHAR2(3),
	BASE_CURR VARCHAR2(3),
	-- FOR YEN TO KRW, FX RATE IS QUOTED BASED ON 100 YEN.
	-- SCALE_FACTOR IS SET TO 100 TO USE THE QUOTE PRICE WITHOUT ANY CONVERSION.
	SCALE_FACTOR NUMBER(10,4),
	PRIMARY KEY (FX_ID)
);


CREATE TABLE TAKION79.FX_RATE_HIS
(
	BSSD VARCHAR2(8) NOT NULL,
	FX_ID VARCHAR2(20) NOT NULL,
	BASE_PRICE NUMBER(19,4),
	OPEN_PRICE NUMBER(19,4),
	HIGH_PRICE NUMBER(19,4),
	LOW_PRICE NUMBER(19,4),
	CLOSE_PRICE NUMBER(19,4),
	VOLUME NUMBER(19,0),
	VOLUME_AMT NUMBER(19,0),
	PRIMARY KEY (BSSD, FX_ID)
);


CREATE TABLE TAKION79.HIFIVE
(
	PROD_ID VARCHAR2(20) NOT NULL,
	PROD_NAME VARCHAR2(50),
	-- ELS
	-- SWAP
	-- 
	HIFIVE_TYPE VARCHAR2(10),
	ISSUE_DATE VARCHAR2(8),
	MATURITY_DATE VARCHAR2(8),
	COUNTERPARTY_ID VARCHAR2(20) NOT NULL,
	-- 평가기준금액(10000원)
	FACE_AMT NUMBER(10),
	-- 총발행금액
	NOTIONAL_AMT NUMBER(10),
	DOWN_BARRIER NUMBER(10,4),
	-- 최대손실비율(0~1)
	MAX_LOSS NUMBER(10,4),
	-- KIS 의 쿠폰 배열의 마지막 인덱스의 이자율
	-- 다운 배리어 히팅시  또는 업 배리어 히팅시 적용 이자율로 추정
	COUPON_RATE_LAST NUMBER(10,4),
	-- KIS
	--  1 : 업 배리어 히팅여부를 기초자산별로 판단
	--  0 : 업 배리어 히팅여부를 모든 기초자산에 대해 동시에 판단
	HITTING_TYPE VARCHAR2(10),
	PRIMARY KEY (PROD_ID)
);


CREATE TABLE TAKION79.HIFIVE_STRIKE
(
	PROD_ID VARCHAR2(20) NOT NULL,
	-- 조기상환회차
	STRIKE_SERIAL NUMBER(10) NOT NULL,
	-- STRIKE_PRICE 평가일(조기상환평가일)
	STRIKE_DATE VARCHAR2(8),
	-- 조기상환금액 지급일
	PAYMENT_DATE VARCHAR2(8),
	STRIKE_PRICE NUMBER(10,4) NOT NULL,
	-- DOUBLE JUMP STRIKE PRICE
	-- KIS : 조건이 없는 경우 STRIKE_PRICE 로 복사해야한다.
	-- 조건이 있는 경우는 우선순위가 있어서 STRIKE PRICE 를 충족하면 이하 조건은 무시하는  걸로 추정된다.
	-- 
	DBL_JUMP_STRIKE NUMBER(10,4),
	-- TRIPLE JUMP STRIKE PRICE
	-- KIS : 조건이 없는 경우 STRIKE_PRICE 로 복사해야한다.
	TPL_JUMP_STRIKE NUMBER(10,4),
	-- STRIKE PRICE HITTING 시 PAYOFF 비율 (예: 1.05)
	PAYOFF_AMT NUMBER(10,4),
	DBL_JUMP_PAYOFF NUMBER(10,4),
	TPL_JUMP_PAYOFF NUMBER(10,4),
	-- STRIKE PRICE 미 히팅시 지급 이자의 비율 (예:5%)
	COUPON_RATE NUMBER(10,4),
	-- UP 시 KNOCK_OUT  BARRIER 비율 ( 예 : 1.2)
	UP_BARRIER NUMBER(10,4),
	PRIMARY KEY (PROD_ID, STRIKE_SERIAL)
);


CREATE TABLE TAKION79.HIFIVE_SWAP_IR
(
	PROD_ID VARCHAR2(20) NOT NULL,
	REF_IRC_ID VARCHAR2(20) NOT NULL,
	-- D01, D07, W01, M01, M02,M03, M06,M09,M12, Y01, Y02,Y03,Y04,Y05,Y07,Y10,Y15,Y20
	PAYMENT_TERM VARCHAR2(10) NOT NULL,
	SPREAD NUMBER(10,4),
	FIXED_RATE NUMBER(10,4),
	PRIMARY KEY (PROD_ID)
);


CREATE TABLE TAKION79.HIFIVE_UNDERLYING
(
	PROD_ID VARCHAR2(20) NOT NULL,
	STOCK_ID VARCHAR2(20) NOT NULL,
	BASE_PRICE NUMBER(10,4),
	-- 배당율(0~1)
	DIVIDEND NUMBER(10,4),
	-- UP BARRIER HITTING 여부 (Y/N)
	-- KIS ( 0:N  NON-HITTED, 1:Y : HITTED)
	IS_UPHITTED CHAR,
	PRIMARY KEY (PROD_ID, STOCK_ID)
);


CREATE TABLE TAKION79.INT_RATE
(
	IR_ID VARCHAR2(20) NOT NULL,
	IR_NAME VARCHAR2(50),
	ISSUE_DATE VARCHAR2(8),
	MATURITY_DATE VARCHAR2(8),
	COMPOUND_MTD VARCHAR2(10),
	DAYCOUNT_MTD VARCHAR2(10),
	INT_TERM VARCHAR2(10),
	COUPON_RATE NUMBER(10,8),
	SOURCE_TABLE VARCHAR2(50),
	USER_NAME VARCHAR2(20),
	LAST_UPDATED VARCHAR2(8),
	VERSION_NO NUMBER,
	PRIMARY KEY (IR_ID)
);


CREATE TABLE TAKION79.INT_RATE_HIS
(
	BSSD VARCHAR2(8) NOT NULL,
	IR_ID VARCHAR2(20) NOT NULL,
	INT_RATE NUMBER(10,4),
	PRIMARY KEY (BSSD, IR_ID)
);


CREATE TABLE TAKION79.IRC_BUCKET_DETAIL
(
	IRC_ID VARCHAR2(20) NOT NULL,
	IR_ID VARCHAR2(20) NOT NULL,
	MATURITY_ID VARCHAR2(10),
	PRIMARY KEY (IRC_ID, IR_ID)
);


CREATE TABLE TAKION79.IRC_FUNCTION_DETAIL
(
	IRC_ID VARCHAR2(20) NOT NULL,
	REF_IRC_ID VARCHAR2(20) NOT NULL,
	COEFFICIENT NUMBER(10,4),
	POWER NUMBER(10,4),
	CONSTANT NUMBER(10,4),
	PRIMARY KEY (IRC_ID, REF_IRC_ID)
);


CREATE TABLE TAKION79.IR_CURVE
(
	IRC_ID VARCHAR2(20) NOT NULL,
	IRC_NAME VARCHAR2(50),
	-- SLIDING, EXPECTATION, CONSTANT,...
	FORWARDIND_MTD VARCHAR2(10),
	-- LINEAR, DIS_LINEAR, LOG_LINEAR, EXPONENTIAL, CONSTANT,
	-- BACKWARD_CON, CUBIC_SPLINE
	INTERPOL_MTD VARCHAR2(10),
	-- BUCKET, CURVE FUNCTION_SUM, CURVE_FUNCTION_MUL
	GENERATION_TYPE VARCHAR2(10),
	SOURCE_TABLE VARCHAR2(50),
	USER_NAME VARCHAR2(20),
	LAST_UPDATED VARCHAR2(8),
	VERSION_NO NUMBER,
	PRIMARY KEY (IRC_ID)
);


CREATE TABLE TAKION79.IR_CURVE_HIS
(
	BSSD VARCHAR2(8) NOT NULL,
	-- D01, D07, W01, M01, M02,M03, M06,M09,M12, Y01, Y02,Y03,Y04,Y05,Y07,Y10,Y15,Y20
	MATURITY_ID VARCHAR2(10) NOT NULL,
	IRC_ID VARCHAR2(20) NOT NULL,
	INT_RATE NUMBER(10,4),
	PRIMARY KEY (BSSD, MATURITY_ID, IRC_ID)
);


CREATE TABLE TAKION79.MACRO_INDEX
(
	MACRO_INDEX_ID VARCHAR2(20) NOT NULL,
	SOURCE_TABLE VARCHAR2(50),
	USER_NAME VARCHAR2(20),
	LAST_UPDATED VARCHAR2(8),
	VERSION_NO NUMBER,
	PRIMARY KEY (MACRO_INDEX_ID)
);


CREATE TABLE TAKION79.MACRO_INDEX_HIS
(
	BSSD VARCHAR2(8) NOT NULL,
	MACRO_INDEX_ID VARCHAR2(20) NOT NULL,
	INDEX_VALUE NUMBER(19,4),
	PRIMARY KEY (BSSD, MACRO_INDEX_ID)
);


CREATE TABLE TAKION79.MARKET_VARIABLE
(
	MV_ID VARCHAR2(20) NOT NULL,
	MV_NAME VARCHAR2(50),
	MV_TYPE VARCHAR2(10),
	PRODUCT_YN VARCHAR2(1),
	RF_YN VARCHAR2(1),
	PRIMARY KEY (MV_ID)
);


CREATE TABLE TAKION79.MATURITY
(
	-- D01, D07, W01, M01, M02,M03, M06,M09,M12, Y01, Y02,Y03,Y04,Y05,Y07,Y10,Y15,Y20
	MATURITY_ID VARCHAR2(10) NOT NULL,
	DAY_NUM NUMBER(10,0),
	PRIMARY KEY (MATURITY_ID)
);


CREATE TABLE TAKION79.OPTIONS
(
	OPTION_ID VARCHAR2(20) NOT NULL,
	OPTION_NAME VARCHAR2(50),
	-- CALL, PUT 
	OPTION_TYPE VARCHAR2(10),
	-- INDEX, STOCK, BINARY, BARIRRER, ....
	-- 
	EXOTIC_TYPE VARCHAR2(10),
	ISSUE_DATE VARCHAR2(8),
	MATURITY_DATE VARCHAR2(8),
	UNDERLYING_ID VARCHAR2(20),
	STRIKE_PRICE NUMBER(10,4),
	-- MULTIPLIER TO CONVERT PRICE INTO CURRENCY AMOUNT
	MULTIPLIER NUMBER(10,0),
	-- RATIO TO CHANGE OPTION INTO UNDERLING ASSET
	CONVERSION_RATIO NUMBER(10,4),
	SOURCE_TABLE VARCHAR2(50),
	USER_NAME VARCHAR2(20),
	LAST_UPDATED VARCHAR2(8),
	VERSION_NO NUMBER,
	ISSUER_ID VARCHAR2(20),
	EXCHANGE_ID VARCHAR2(20),
	PRIMARY KEY (OPTION_ID)
);


CREATE TABLE TAKION79.OPTION_HIS
(
	BSSD VARCHAR2(8) NOT NULL,
	OPTION_ID VARCHAR2(20) NOT NULL,
	BASE_PRICE NUMBER(19,4),
	OPEN_PRICE NUMBER(19,4),
	HIGH_PRICE NUMBER(19,4),
	LOW_PRICE NUMBER(19,4),
	CLOSE_PRICE NUMBER(19,4),
	VOLUME NUMBER(19,0),
	VOLUME_AMT NUMBER(19,0),
	DELTA NUMBER(19,4),
	GAMMA NUMBER(19,4),
	VEGA NUMBER(19,4),
	THETA NUMBER(19,4),
	RHO NUMBER(19,4),
	IMPLIED_VOL NUMBER(19,4),
	UNSETTLE_AMT NUMBER(19,0),
	PRIMARY KEY (BSSD, OPTION_ID)
);


CREATE TABLE TAKION79.PORTFOLIO
(
	PORT_ID VARCHAR2(50) NOT NULL,
	PORT_NAME VARCHAR2(50),
	GROUP_ID VARCHAR2(20),
	PARENT_PORT_ID VARCHAR2(50),
	LEVEL1 VARCHAR2(20),
	LEVEL2 VARCHAR2(20),
	LEVEL3 VARCHAR2(20),
	LEVEL4 VARCHAR2(20),
	LEVEL5 VARCHAR2(20),
	PRIMARY KEY (PORT_ID)
);


CREATE TABLE TAKION79.PORTFOLIO_CASHFLOW
(
	BSSD VARCHAR2(8) NOT NULL,
	PORT_ID VARCHAR2(50) NOT NULL,
	CF_DATE VARCHAR2(8) NOT NULL,
	CF_AMT NUMBER(19,4),
	CF_PRIN_AMT NUMBER(19,4),
	CF_INT_AMT NUMBER(19,4),
	PRIMARY KEY (BSSD, PORT_ID, CF_DATE)
);


CREATE TABLE TAKION79.PORTFOLIO_CHILD
(
	PORT_ID VARCHAR2(50) NOT NULL,
	SUB_PORT_ID VARCHAR2(50) NOT NULL,
	PRIMARY KEY (PORT_ID, SUB_PORT_ID)
);


CREATE TABLE TAKION79.PORTFOLIO_DETAIL
(
	BSSD VARCHAR2(8) NOT NULL,
	PORT_ID VARCHAR2(50) NOT NULL,
	POS_ID VARCHAR2(50) NOT NULL,
	PRIMARY KEY (BSSD, PORT_ID, POS_ID)
);


CREATE TABLE TAKION79.PORTFOLIO_RETURN
(
	BSSD VARCHAR2(8) NOT NULL,
	PORT_ID VARCHAR2(50) NOT NULL,
	BOOK_AMT NUMBER(19,4),
	PRES_VALUE NUMBER(19,4),
	DAILY_RETURN NUMBER(19,4),
	MONTHLY_RETURN NUMBER(19,4),
	QUARTLY_RETURN NUMBER(19,4),
	ANNUAL_RETURN NUMBER(19,4),
	FISCAL_RETURN NUMBER(19,4),
	DELTA_RETURN NUMBER(19,4),
	GAMMA_RETURN NUMBER(19,4),
	VEGA_RETURN NUMBER(19,4),
	THETA_RETURN NUMBER(19,4),
	RHO_RETURN NUMBER(19,4),
	PRIMARY KEY (BSSD, PORT_ID)
);


CREATE TABLE TAKION79.PORTFOLIO_RISK
(
	BSSD VARCHAR2(8) NOT NULL,
	PORT_ID VARCHAR2(50) NOT NULL,
	VAR_GEN_ID VARCHAR2(10) NOT NULL,
	VAR NUMBER(19,4),
	EXPECTED_SHORTFALL NUMBER(19,4),
	EQ_VAR NUMBER(19,4),
	FX_VAR NUMBER(19,4),
	IR_VAR NUMBER(19,4),
	CO_VAR NUMBER(19,4),
	MARGINAL_VAR NUMBER(19,4),
	CONTRIBUTION_VAR NUMBER(19,4),
	PRIMARY KEY (BSSD, PORT_ID, VAR_GEN_ID)
);


CREATE TABLE TAKION79.PORTFOLIO_RISK_DETAIL
(
	BSSD VARCHAR2(8) NOT NULL,
	PORT_ID VARCHAR2(50) NOT NULL,
	-- FOR VAR_TYPE WITH DELTA_NORMAL, DELTA_GAMMA 
	VAR_GEN_ID VARCHAR2(10) NOT NULL,
	RF_ID VARCHAR2(20) NOT NULL,
	DELTA_EQUV NUMBER(19,4),
	GAMMA_EQUV NUMBER(19,4),
	PRIMARY KEY (BSSD, PORT_ID, VAR_GEN_ID, RF_ID)
);


CREATE TABLE TAKION79.PORTFOLIO_SENSITIVITY
(
	BSSD VARCHAR2(8) NOT NULL,
	PORT_ID VARCHAR2(50) NOT NULL,
	BOOK_AMT NUMBER(19,4),
	PRES_VALUE NUMBER(19,4),
	-- WEIGHTED RESIDUAL MATURITY
	WGT_RES_MATURITY NUMBER(19,4),
	ADJ_DURATION NUMBER(19,4),
	MD_DURATION NUMBER(19,4),
	EFFECT_DURATION NUMBER(19,4),
	ADJ_CONVEXITY NUMBER(19,4),
	EFFECT_CONVEXITY NUMBER(19,4),
	PV01 NUMBER(19,4),
	PRIMARY KEY (BSSD, PORT_ID)
);


CREATE TABLE TAKION79.POSITION
(
	POS_ID VARCHAR2(50) NOT NULL,
	POS_NAME VARCHAR2(50),
	PROD_ID VARCHAR2(20),
	DEALER_ID VARCHAR2(20),
	COUNTERPARTY_ID VARCHAR2(20),
	ACCOUNT_ID VARCHAR2(20),
	INIT_TX_DATE VARCHAR2(8),
	LAST_TX_DATE VARCHAR2(8),
	INIT_TX_PRICE NUMBER(19,4),
	INIT_FEE_AMT NUMBER(19,4),
	INIT_TX_AMT NUMBER(19,4),
	HOLDING_QTY NUMBER(19,4),
	POS_AMT NUMBER(19,4),
	PRIMARY KEY (POS_ID)
);


CREATE TABLE TAKION79.POSITION_CASHFLOW
(
	BSSD VARCHAR2(8) NOT NULL,
	POS_ID VARCHAR2(50) NOT NULL,
	CF_DATE VARCHAR2(8) NOT NULL,
	CF_AMT NUMBER(19,4),
	CF_PRIN_AMT NUMBER(19,4),
	CF_INT_AMT NUMBER(19,4),
	PRIMARY KEY (BSSD, POS_ID, CF_DATE)
);


CREATE TABLE TAKION79.POSITION_GREEKS
(
	BSSD VARCHAR2(8) NOT NULL,
	POS_ID VARCHAR2(50) NOT NULL,
	UNDERLYING_ID VARCHAR2(20) NOT NULL,
	DELTA NUMBER(19,4),
	GAMMA NUMBER(19,4),
	VEGA NUMBER(19,4),
	THETA NUMBER(19,4),
	RHO NUMBER(19,4),
	PRIMARY KEY (BSSD, POS_ID, UNDERLYING_ID)
);


CREATE TABLE TAKION79.POSITION_IR_SENSITITIVY
(
	BSSD VARCHAR2(8) NOT NULL,
	POS_ID VARCHAR2(50) NOT NULL,
	RESIDUAL_MATURITY NUMBER(10,4),
	ADJ_DURATION NUMBER(19,4),
	MD_DURATION NUMBER(19,4),
	EFFECT_DURATION NUMBER(19,4),
	ADJ_CONVEXITY NUMBER(19,4),
	EFFECT_CONVEXITY NUMBER(19,4),
	PRIMARY KEY (BSSD, POS_ID)
);


CREATE TABLE TAKION79.POSITION_RETURN
(
	BSSD VARCHAR2(8) NOT NULL,
	POS_ID VARCHAR2(50) NOT NULL,
	BOOK_AMT NUMBER(19,4),
	PV NUMBER(19,4),
	DAILY_RETURN NUMBER(19,4),
	MONTHLY_RETURN NUMBER(19,4),
	QUARTLY_RETURN NUMBER(19,4),
	ANNUAL_RETURN NUMBER(19,4),
	FISCAL_RETURN NUMBER(19,4),
	DELTA_RETURN NUMBER(19,4),
	GAMMA_RETURN NUMBER(19,4),
	VEGA_RETURN NUMBER(19,4),
	THETA_RETURN NUMBER(19,4),
	RHO_RETURN NUMBER(19,4),
	PRIMARY KEY (BSSD, POS_ID)
);


CREATE TABLE TAKION79.POSITION_RISK
(
	BSSD VARCHAR2(8) NOT NULL,
	POS_ID VARCHAR2(50) NOT NULL,
	VAR_GEN_ID VARCHAR2(10) NOT NULL,
	VAR NUMBER(19,4),
	EXPECTED_SHORTFALL NUMBER(19,4),
	EQ_VAR NUMBER(19,4),
	FX_VAR NUMBER(19,4),
	IR_VAR NUMBER(19,4),
	CO_VAR NUMBER(19,4),
	MARGINAL_VAR NUMBER(19,4),
	CONTRIBUTION_VAR NUMBER(19,4),
	PRIMARY KEY (BSSD, POS_ID, VAR_GEN_ID)
);


CREATE TABLE TAKION79.POSITION_RISK_DETAIL
(
	BSSD VARCHAR2(8) NOT NULL,
	POS_ID VARCHAR2(50) NOT NULL,
	VAR_GEN_ID VARCHAR2(10) NOT NULL,
	RF_ID VARCHAR2(20) NOT NULL,
	DELTA_EQUV NUMBER(19,4),
	GAMMA_EQUV NUMBER(19,4),
	PRIMARY KEY (BSSD, POS_ID, VAR_GEN_ID, RF_ID)
);


CREATE TABLE TAKION79.PRICER
(
	-- PRICING 모듈 식별자
	PRICER_ID VARCHAR2(20) NOT NULL,
	PRICER_NAME VARCHAR2(50),
	-- ANALYTIC, MC, FDM
	PRICER_TYPE VARCHAR2(10),
	-- PRICING 모듈 원천
	-- INHOUSE
	-- KIS
	-- NUMERIX
	PRICER_VENDOR VARCHAR2(10),
	MC_NUM NUMBER(10),
	FDM_LATTICE_NUM NUMBER(10),
	DLL_NAME VARCHAR2(50),
	PRIMARY KEY (PRICER_ID)
);


CREATE TABLE TAKION79.PRICING
(
	-- VAR
	-- BACKOFFICE
	-- VALIDATION
	-- NEW_PRODUCT
	PRICING_OBJECT VARCHAR2(20) NOT NULL,
	PROD_ID VARCHAR2(20) NOT NULL,
	-- PRICING 모듈 식별자
	PRICER_ID VARCHAR2(20) NOT NULL,
	IRC_ID VARCHAR2(20) NOT NULL,
	VOL_CURVE_ID VARCHAR2(20) NOT NULL,
	VCV_ID VARCHAR2(20) NOT NULL,
	-- MC 시뮬레이션 회수
	MC_NUM NUMBER(10),
	-- FDM 격자수
	FDM_LATTICE_NUM NUMBER(10),
	PRIMARY KEY (PRICING_OBJECT, PROD_ID)
);


CREATE TABLE TAKION79.PRICING_METHOD
(
	-- VAR
	-- BACKOFFICE
	-- VALIDATION
	-- NEW_PRODUCT
	PRICING_OBJECT VARCHAR2(20) NOT NULL,
	PRICNG_OBJECT_NAME VARCHAR2(50),
	PRIMARY KEY (PRICING_OBJECT)
);


CREATE TABLE TAKION79.PRICING_UNDERLYING
(
	-- VAR
	-- BACKOFFICE
	-- VALIDATION
	-- NEW_PRODUCT
	PRICING_OBJECT VARCHAR2(20) NOT NULL,
	PROD_ID VARCHAR2(20) NOT NULL,
	STOCK_ID VARCHAR2(20) NOT NULL,
	REF_IRC_ID VARCHAR2(20) NOT NULL,
	VOL_CURVE_ID VARCHAR2(20) NOT NULL,
	PRIMARY KEY (PRICING_OBJECT, PROD_ID, STOCK_ID)
);


CREATE TABLE TAKION79.PRODUCT_CASHFLOW
(
	BSSD VARCHAR2(8) NOT NULL,
	PROD_ID VARCHAR2(20) NOT NULL,
	CF_DATE VARCHAR2(8) NOT NULL,
	CF_AMT NUMBER(19,4),
	CF_PRIN_AMT NUMBER(19,4),
	CF_INT_AMT NUMBER(19,4),
	PRIMARY KEY (BSSD, PROD_ID, CF_DATE)
);


CREATE TABLE TAKION79.RISK_FACTOR
(
	RF_ID VARCHAR2(20) NOT NULL,
	RF_NAME VARCHAR2(50),
	-- EQ, IR, FX, CO, VO
	RF_TYPE VARCHAR2(10),
	SOURCE_TABLE VARCHAR2(50),
	USER_NAME VARCHAR2(20),
	LAST_UPDATED VARCHAR2(8),
	VERSION_NO NUMBER,
	PRIMARY KEY (RF_ID)
);


CREATE TABLE TAKION79.SCENARIO
(
	SCENARIO_ID VARCHAR2(20) NOT NULL,
	SCENARIO_NAME VARCHAR2(50),
	-- UD, HSVAR, MCVAR, ...
	SCENARIO_TYPE VARCHAR2(10),
	SCENARIO_SET VARCHAR2(20),
	PRIMARY KEY (SCENARIO_ID)
);


CREATE TABLE TAKION79.SCENARIO_DETAIL
(
	SCENARIO_ID VARCHAR2(20) NOT NULL,
	MV_ID VARCHAR2(20) NOT NULL,
	-- MULTIPLE, ADD, ...
	SHOCK_TYPE VARCHAR2(10),
	SHOCK_VALUE NUMBER(19,4),
	PRIMARY KEY (SCENARIO_ID, MV_ID)
);


CREATE TABLE TAKION79.SCENARIO_HIS
(
	BSSD VARCHAR2(8) NOT NULL,
	SCENARIO_ID VARCHAR2(20) NOT NULL,
	MV_ID VARCHAR2(20) NOT NULL,
	BASE_VALUE NUMBER(19,4),
	SCENARIO_VALUE NUMBER(19,4),
	PRIMARY KEY (BSSD, SCENARIO_ID, MV_ID)
);


CREATE TABLE TAKION79.SCENARIO_SET
(
	SCENARIO_SET VARCHAR2(20) NOT NULL,
	SCENARIO_SET_NAME VARCHAR2(50),
	VAR_SCE_ID VARCHAR2(20) NOT NULL,
	PRIMARY KEY (SCENARIO_SET)
);


-- SETTINGS FOR CONVERTING SCENARIO USED IN VAR CALCULATION  INTO GENERAL FORM.
-- SO IT REQUIRES THE SCENARIO GENERATION PROCEDURE
CREATE TABLE TAKION79.SCENARIO_VAR
(
	VAR_SCE_ID VARCHAR2(20) NOT NULL,
	-- HISTORICAL, MC
	VAR_TYPE VARCHAR2(10),
	TIME_HORIZON NUMBER(10,0),
	-- ONLY FOR HISTIORICAL VAR
	-- TO PICK THE HISTORY MARKET DATA BACKWARD FROM THIS DATE  TO GENERATE HISTORICAL SCEANRIO.  IF NULL, PICK THE  HISTORY DATA FROM CURRENT DATA
	SAMPLING_BSSD VARCHAR2(8),
	SAMPLING_SIZE NUMBER(10,0),
	-- VARIANCE_COVARIANCE MATRIX FOR MONTE CARLO SIMULATION
	VCV_ID VARCHAR2(20),
	PRIMARY KEY (VAR_SCE_ID)
);


CREATE TABLE TAKION79.STOCK
(
	MV_ID VARCHAR2(20) NOT NULL,
	-- NOMARL, PREFERRED, ETF,SPEC, ...
	STOCK_TYPE VARCHAR2(10),
	-- STOCK EXCHANGE IDENDIFIER
	EXCHANGE_ID VARCHAR2(20),
	IS_LISTED CHAR(1),
	NUM_SHARES NUMBER(10,0),
	ISSUER_ID VARCHAR2(30),
	FACE_AMT NUMBER(10,0),
	SOURCE_TABLE VARCHAR2(50),
	USER_NAME VARCHAR2(20),
	LAST_UPDATED VARCHAR2(8),
	VERSION_NO NUMBER,
	PRIMARY KEY (MV_ID)
);


CREATE TABLE TAKION79.STOCK_EXCHANGE
(
	EXCHANGE_ID VARCHAR2(20) NOT NULL,
	EXCHANGE_NAME VARCHAR2(50),
	CURR_CD VARCHAR2(3),
	NATION_CD VARCHAR2(3),
	PRIMARY KEY (EXCHANGE_ID)
);


CREATE TABLE TAKION79.STOCK_HIS
(
	BSSD VARCHAR2(8) NOT NULL,
	STOCK_ID VARCHAR2(20) NOT NULL,
	BASE_PRICE NUMBER(19,4),
	OPEN_PRICE NUMBER(19,4),
	HIGH_PRICE NUMBER(19,4),
	LOW_PRICE NUMBER(19,4),
	CLOSE_PRICE NUMBER(19,4),
	VOLUME NUMBER(19,0),
	VOLUME_AMT NUMBER(19,0),
	DIVIDEN_GAP NUMBER(19,4),
	PRIMARY KEY (BSSD, STOCK_ID)
);


CREATE TABLE TAKION79.STOCK_INDEX
(
	ST_INDEX_ID VARCHAR2(20) NOT NULL,
	ST_INDEX_NAME VARCHAR2(50),
	INDEX_TYPE VARCHAR2(10),
	PRIMARY KEY (ST_INDEX_ID)
);


CREATE TABLE TAKION79.STOCK_INDEX_DETAIL
(
	ST_INDEX_ID VARCHAR2(20) NOT NULL,
	STOCK_ID VARCHAR2(20) NOT NULL,
	INIT_WEIGHT NUMBER(10,4),
	INIT_AMT NUMBER(19,0),
	IS_ACTIVE CHAR(1),
	SOURCE_TABLE VARCHAR2(50),
	USER_NAME VARCHAR2(20),
	LAST_UPDATED VARCHAR2(8),
	VERSION_NO NUMBER,
	PRIMARY KEY (ST_INDEX_ID, STOCK_ID)
);


CREATE TABLE TAKION79.STOCK_INDEX_HIS
(
	BSSD VARCHAR2(8) NOT NULL,
	ST_INDEX_ID VARCHAR2(20) NOT NULL,
	BASE_PRICE NUMBER(19,4),
	OPEN_PRICE NUMBER(19,4),
	HIGH_PRICE NUMBER(19,4),
	LOW_PRICE NUMBER(19,4),
	CLOSE_PRICE NUMBER(19,4),
	VOLUME NUMBER(19,0),
	VOLUME_AMT NUMBER(19,0),
	PRIMARY KEY (BSSD, ST_INDEX_ID)
);


CREATE TABLE TAKION79.SYNTHETICS
(
	SYN_PROD_ID VARCHAR2(20) NOT NULL,
	-- SWAP, SPREAD, USER_DEFINED
	SYNTHETIC_TYPE VARCHAR2(10),
	SYN_PROD_NAME VARCHAR2(50),
	SOURCE_TABLE VARCHAR2(50),
	USER_NAME VARCHAR2(20),
	LAST_UPDATED VARCHAR2(8),
	VERSION_NO NUMBER,
	PRIMARY KEY (SYN_PROD_ID)
);


CREATE TABLE TAKION79.SYNTHETICS_HIS
(
	BSSD VARCHAR2(8) NOT NULL,
	SYN_PROD_ID VARCHAR2(20) NOT NULL,
	BASE_PRICE NUMBER(19,4),
	OPEN_PRICE NUMBER(19,4),
	HIGH_PRICE NUMBER(19,4),
	LOW_PRICE NUMBER(19,4),
	CLOSE_PRICE NUMBER(19,4),
	VOLUME NUMBER(19,0),
	VOLUME_AMT NUMBER(19,0),
	PRIMARY KEY (BSSD, SYN_PROD_ID)
);


CREATE TABLE TAKION79.SYNTHETIC_DETAIL
(
	SYN_PROD_ID VARCHAR2(20) NOT NULL,
	SUB_PROD_ID VARCHAR2(20) NOT NULL,
	SUB_PROD_NAME VARCHAR2(50),
	WEIGHT NUMBER(19,4),
	SOURCE_TABLE VARCHAR2(50),
	USER_NAME VARCHAR2(20),
	LAST_UPDATED VARCHAR2(8),
	VERSION_NO NUMBER,
	PRIMARY KEY (SYN_PROD_ID, SUB_PROD_ID)
);


CREATE TABLE TAKION79.VAR_GEN_MCD
(
	VAR_GEN_ID VARCHAR2(10) NOT NULL,
	-- DELTA_NORMAL, DELTA_GAMMA, HISTORICAL, MC
	VAR_TYPE VARCHAR2(10),
	TIME_HORIZON NUMBER(10),
	PRIMARY KEY (VAR_GEN_ID)
);


CREATE TABLE TAKION79.VCV_MATRIX
(
	VCV_ID VARCHAR2(20) NOT NULL,
	-- EWMA, SMA, GARCH...
	VCV_TYPE VARCHAR2(10),
	SAMPLING_SIZE NUMBER(10,0),
	TIME_HORIZON NUMBER(10),
	DECAY_FACTOR NUMBER(10,4),
	-- APPLY ZERO MEAN EVEN THOUGH THE CALCUALTED MEAN OF SAMPLING DATA IS NOT ZERO
	ZERO_MEAN CHAR(1) DEFAULT 'Y',
	-- FOR IR TYPE MARKET VARIABLE, THIS FLAG INDICATES THAT THE RAW DATA IS USED FOR ESTIMATION OR CONVERTED DISCOUNT FACTOR IS USED
	PRICE_VOL CHAR(1) DEFAULT 'Y',
	PRIMARY KEY (VCV_ID)
);


CREATE TABLE TAKION79.VCV_MATRIX_HIS
(
	BSSD VARCHAR2(8) NOT NULL,
	VCV_ID VARCHAR2(20) NOT NULL,
	RF_ID VARCHAR2(20) NOT NULL,
	REF_RF_ID VARCHAR2(20) NOT NULL,
	COVARIANCE NUMBER(19,4),
	CORREL NUMBER(10,4),
	PRIMARY KEY (BSSD, VCV_ID, RF_ID, REF_RF_ID)
);


CREATE TABLE TAKION79.VOL_CURVE
(
	VOL_CURVE_ID VARCHAR2(20) NOT NULL,
	VOL_CURVE_NAME VARCHAR2(50),
	UNDERLYING_ID VARCHAR2(20),
	PRIMARY KEY (VOL_CURVE_ID)
);



/* Comments */

COMMENT ON COLUMN TAKION79.BASEDATE.EOS_BIZDAY IS 'END OF SEMI ANNUAL';
COMMENT ON COLUMN TAKION79.BOND.BOND_CF_TYPE IS 'DISCOUNT, BULLET, FIXED, FLOATING, FIXED AMORT, FLOAT_AMORT, ...';
COMMENT ON COLUMN TAKION79.BOND.PRIORITY_CD IS 'FISRT, SECONDARY';
COMMENT ON COLUMN TAKION79.BOND.SECURITIZATION_CD IS 'ABS, MBS, CDO,....';
COMMENT ON COLUMN TAKION79.BOND.BOND_TYPE IS 'GOV,ILB, BANK, CORP, ABS,...';
COMMENT ON COLUMN TAKION79.BOND.REDEM_MCD IS 'ANNUITY, EQUAL, BULLET';
COMMENT ON COLUMN TAKION79.BOND.CP_DATE_GEN IS 'FORWARD, BACKWARD,...';
COMMENT ON COLUMN TAKION79.BOND.STOCK_LINKED_TYPE IS 'CONVERTIBLE, EXCHANGABLE,...';
COMMENT ON COLUMN TAKION79.COUNTERPARTY.COUNTERPARTY_TYPE IS 'GOV, BANK, SECURITIES, ASSET, INSURER, BROKER, ...';
COMMENT ON COLUMN TAKION79.EMPLOYEE.MEMBER_TYPE IS 'ADMIN, MANAGER, DEALER, STAFF,...';
COMMENT ON TABLE TAKION79.ETF_PDF IS 'NUMBER OF HOLDING STOCK FOR 1 CU OF ETF';
COMMENT ON COLUMN TAKION79.FX_CASH.SCALE_FACTOR IS 'FOR YEN TO KRW, FX RATE IS QUOTED BASED ON 100 YEN.
SCALE_FACTOR IS SET TO 100 TO USE THE QUOTE PRICE WITHOUT ANY CONVERSION.';
COMMENT ON COLUMN TAKION79.HIFIVE.HIFIVE_TYPE IS 'ELS
SWAP
';
COMMENT ON COLUMN TAKION79.HIFIVE.FACE_AMT IS '평가기준금액(10000원)';
COMMENT ON COLUMN TAKION79.HIFIVE.NOTIONAL_AMT IS '총발행금액';
COMMENT ON COLUMN TAKION79.HIFIVE.MAX_LOSS IS '최대손실비율(0~1)';
COMMENT ON COLUMN TAKION79.HIFIVE.COUPON_RATE_LAST IS 'KIS 의 쿠폰 배열의 마지막 인덱스의 이자율
다운 배리어 히팅시  또는 업 배리어 히팅시 적용 이자율로 추정';
COMMENT ON COLUMN TAKION79.HIFIVE.HITTING_TYPE IS 'KIS
 1 : 업 배리어 히팅여부를 기초자산별로 판단
 0 : 업 배리어 히팅여부를 모든 기초자산에 대해 동시에 판단';
COMMENT ON COLUMN TAKION79.HIFIVE_STRIKE.STRIKE_SERIAL IS '조기상환회차';
COMMENT ON COLUMN TAKION79.HIFIVE_STRIKE.STRIKE_DATE IS 'STRIKE_PRICE 평가일(조기상환평가일)';
COMMENT ON COLUMN TAKION79.HIFIVE_STRIKE.PAYMENT_DATE IS '조기상환금액 지급일';
COMMENT ON COLUMN TAKION79.HIFIVE_STRIKE.DBL_JUMP_STRIKE IS 'DOUBLE JUMP STRIKE PRICE
KIS : 조건이 없는 경우 STRIKE_PRICE 로 복사해야한다.
조건이 있는 경우는 우선순위가 있어서 STRIKE PRICE 를 충족하면 이하 조건은 무시하는  걸로 추정된다.
';
COMMENT ON COLUMN TAKION79.HIFIVE_STRIKE.TPL_JUMP_STRIKE IS 'TRIPLE JUMP STRIKE PRICE
KIS : 조건이 없는 경우 STRIKE_PRICE 로 복사해야한다.';
COMMENT ON COLUMN TAKION79.HIFIVE_STRIKE.PAYOFF_AMT IS 'STRIKE PRICE HITTING 시 PAYOFF 비율 (예: 1.05)';
COMMENT ON COLUMN TAKION79.HIFIVE_STRIKE.COUPON_RATE IS 'STRIKE PRICE 미 히팅시 지급 이자의 비율 (예:5%)';
COMMENT ON COLUMN TAKION79.HIFIVE_STRIKE.UP_BARRIER IS 'UP 시 KNOCK_OUT  BARRIER 비율 ( 예 : 1.2)';
COMMENT ON COLUMN TAKION79.HIFIVE_SWAP_IR.PAYMENT_TERM IS 'D01, D07, W01, M01, M02,M03, M06,M09,M12, Y01, Y02,Y03,Y04,Y05,Y07,Y10,Y15,Y20';
COMMENT ON COLUMN TAKION79.HIFIVE_UNDERLYING.DIVIDEND IS '배당율(0~1)';
COMMENT ON COLUMN TAKION79.HIFIVE_UNDERLYING.IS_UPHITTED IS 'UP BARRIER HITTING 여부 (Y/N)
KIS ( 0:N  NON-HITTED, 1:Y : HITTED)';
COMMENT ON COLUMN TAKION79.IR_CURVE.FORWARDIND_MTD IS 'SLIDING, EXPECTATION, CONSTANT,...';
COMMENT ON COLUMN TAKION79.IR_CURVE.INTERPOL_MTD IS 'LINEAR, DIS_LINEAR, LOG_LINEAR, EXPONENTIAL, CONSTANT,
BACKWARD_CON, CUBIC_SPLINE';
COMMENT ON COLUMN TAKION79.IR_CURVE.GENERATION_TYPE IS 'BUCKET, CURVE FUNCTION_SUM, CURVE_FUNCTION_MUL';
COMMENT ON COLUMN TAKION79.IR_CURVE_HIS.MATURITY_ID IS 'D01, D07, W01, M01, M02,M03, M06,M09,M12, Y01, Y02,Y03,Y04,Y05,Y07,Y10,Y15,Y20';
COMMENT ON COLUMN TAKION79.MATURITY.MATURITY_ID IS 'D01, D07, W01, M01, M02,M03, M06,M09,M12, Y01, Y02,Y03,Y04,Y05,Y07,Y10,Y15,Y20';
COMMENT ON COLUMN TAKION79.OPTIONS.OPTION_TYPE IS 'CALL, PUT ';
COMMENT ON COLUMN TAKION79.OPTIONS.EXOTIC_TYPE IS 'INDEX, STOCK, BINARY, BARIRRER, ....
';
COMMENT ON COLUMN TAKION79.OPTIONS.MULTIPLIER IS 'MULTIPLIER TO CONVERT PRICE INTO CURRENCY AMOUNT';
COMMENT ON COLUMN TAKION79.OPTIONS.CONVERSION_RATIO IS 'RATIO TO CHANGE OPTION INTO UNDERLING ASSET';
COMMENT ON COLUMN TAKION79.PORTFOLIO_RISK_DETAIL.VAR_GEN_ID IS 'FOR VAR_TYPE WITH DELTA_NORMAL, DELTA_GAMMA ';
COMMENT ON COLUMN TAKION79.PORTFOLIO_SENSITIVITY.WGT_RES_MATURITY IS 'WEIGHTED RESIDUAL MATURITY';
COMMENT ON COLUMN TAKION79.PRICER.PRICER_ID IS 'PRICING 모듈 식별자';
COMMENT ON COLUMN TAKION79.PRICER.PRICER_TYPE IS 'ANALYTIC, MC, FDM';
COMMENT ON COLUMN TAKION79.PRICER.PRICER_VENDOR IS 'PRICING 모듈 원천
INHOUSE
KIS
NUMERIX';
COMMENT ON COLUMN TAKION79.PRICING.PRICING_OBJECT IS 'VAR
BACKOFFICE
VALIDATION
NEW_PRODUCT';
COMMENT ON COLUMN TAKION79.PRICING.PRICER_ID IS 'PRICING 모듈 식별자';
COMMENT ON COLUMN TAKION79.PRICING.MC_NUM IS 'MC 시뮬레이션 회수';
COMMENT ON COLUMN TAKION79.PRICING.FDM_LATTICE_NUM IS 'FDM 격자수';
COMMENT ON COLUMN TAKION79.PRICING_METHOD.PRICING_OBJECT IS 'VAR
BACKOFFICE
VALIDATION
NEW_PRODUCT';
COMMENT ON COLUMN TAKION79.PRICING_UNDERLYING.PRICING_OBJECT IS 'VAR
BACKOFFICE
VALIDATION
NEW_PRODUCT';
COMMENT ON COLUMN TAKION79.RISK_FACTOR.RF_TYPE IS 'EQ, IR, FX, CO, VO';
COMMENT ON COLUMN TAKION79.SCENARIO.SCENARIO_TYPE IS 'UD, HSVAR, MCVAR, ...';
COMMENT ON COLUMN TAKION79.SCENARIO_DETAIL.SHOCK_TYPE IS 'MULTIPLE, ADD, ...';
COMMENT ON TABLE TAKION79.SCENARIO_VAR IS 'SETTINGS FOR CONVERTING SCENARIO USED IN VAR CALCULATION  INTO GENERAL FORM.
SO IT REQUIRES THE SCENARIO GENERATION PROCEDURE';
COMMENT ON COLUMN TAKION79.SCENARIO_VAR.VAR_TYPE IS 'HISTORICAL, MC';
COMMENT ON COLUMN TAKION79.SCENARIO_VAR.SAMPLING_BSSD IS 'ONLY FOR HISTIORICAL VAR
TO PICK THE HISTORY MARKET DATA BACKWARD FROM THIS DATE  TO GENERATE HISTORICAL SCEANRIO.  IF NULL, PICK THE  HISTORY DATA FROM CURRENT DATA';
COMMENT ON COLUMN TAKION79.SCENARIO_VAR.VCV_ID IS 'VARIANCE_COVARIANCE MATRIX FOR MONTE CARLO SIMULATION';
COMMENT ON COLUMN TAKION79.STOCK.STOCK_TYPE IS 'NOMARL, PREFERRED, ETF,SPEC, ...';
COMMENT ON COLUMN TAKION79.STOCK.EXCHANGE_ID IS 'STOCK EXCHANGE IDENDIFIER';
COMMENT ON COLUMN TAKION79.SYNTHETICS.SYNTHETIC_TYPE IS 'SWAP, SPREAD, USER_DEFINED';
COMMENT ON COLUMN TAKION79.VAR_GEN_MCD.VAR_TYPE IS 'DELTA_NORMAL, DELTA_GAMMA, HISTORICAL, MC';
COMMENT ON COLUMN TAKION79.VCV_MATRIX.VCV_TYPE IS 'EWMA, SMA, GARCH...';
COMMENT ON COLUMN TAKION79.VCV_MATRIX.ZERO_MEAN IS 'APPLY ZERO MEAN EVEN THOUGH THE CALCUALTED MEAN OF SAMPLING DATA IS NOT ZERO';
COMMENT ON COLUMN TAKION79.VCV_MATRIX.PRICE_VOL IS 'FOR IR TYPE MARKET VARIABLE, THIS FLAG INDICATES THAT THE RAW DATA IS USED FOR ESTIMATION OR CONVERTED DISCOUNT FACTOR IS USED';



